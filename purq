#!/bin/bash
# Examine a pull request or branch, comparing it to your master branch.
# Will stash your current work and restore when you're done.
#
# Usage: $0 <pull request #> <remote = upstream>
# 

# Here's where you set your diff'ing tool:
#
# If you don't have a tool ready, use this; it will display a list of files
# that differ and then just drop you into a child shell so you can examine
# changes manually; when you exit the shell your state will be restored.
DIFF_CMD="git diff --name-status %s; bash"
#
# This is my vim branch diffing tool; change it if you like.
DIFF_CMD="vim '+call Gbdiff(\"%s\")'"

if [ -z "$1" ]; then
	echo "Please provide the pull request number as the first argument."
	exit
fi

if [ -n "$2" ]; then
	REMOTE="$2"
else
	REMOTE=upstream
fi

# Check remote name, grab info
REPO="$(git remote -v | grep "^$REMOTE	" | head -n 1 | sed 's/.*\t//' | sed 's/ (.*)//')"
if [ -z "$REPO" ]; then
	echo "Unknown remote \"$REMOTE\"!"
	exit 1
fi

# Save whatever you're working on

GIT_STASH=$(git status --porcelain | grep -v '^??')

if [ -n "$GIT_STASH" ]; then
	echo "Stashing current state..."
	git stash > /dev/null
fi

ON_BRANCH=$(git branch | grep '^* ' | sed 's/^* //')

# This will restore it when finished here

on_exit () {
	echo "Switching back to $ON_BRANCH..."
	git checkout "$ON_BRANCH"
	if [ -n "$GIT_STASH" ]; then
		echo "Restoring stash..."
		git stash pop > /dev/null
	fi

	if [ -n "$TEMP_BRANCH" ]; then
		git branch -D "$TEMP_BRANCH"
	fi
}
trap on_exit EXIT

TEMP_BRANCH="PR-$1"

git fetch "$REPO" refs/pull/$1/head:$TEMP_BRANCH >/dev/null 2>&1

if [ $? -ne 0 ]; then
	echo "git fetch "$REPO" refs/pull/$1/head:$TEMP_BRANCH failed."
	exit 1
fi

git checkout $TEMP_BRANCH

if [ $? -ne 0 ]; then
	echo "git checkout $TEMP_BRANCH failed."
	exit 1
fi

MERGE_BASE="$(git merge-base HEAD master)"
PR_MERGES="$(git log --pretty=oneline $MERGE_BASE..HEAD | grep "[a-f0-9]\{40\} Merge pull request #")"
if [ -n "$PR_MERGES" ]; then
	echo "Looks like you need to rebase... this PR's merge base is not in your master branch."
	exit 1
fi

# TODO: We can add support for diffing merged PRs here if we use this command:
# git show :/^Merge
# to set the base to the last merge instead of the merge-base with master
# (which is effectively HEAD)

echo "Launching diff'er..."

eval $(printf "$DIFF_CMD" "$(git merge-base HEAD master)")

exit 0
